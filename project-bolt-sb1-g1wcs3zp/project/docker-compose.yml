version: '3.8'

services:
  # Frontend
  frontend:
    build: .
    ports:
      - "80:80"
    environment:
      - NODE_ENV=production
    depends_on:
      - backend
      - database
    networks:
      - app-network

  # Backend (Node.js API)
  backend:
    build: ./server
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:password@database:5432/attendance_db
      - JWT_SECRET=your-production-secret-key
      - REDIS_URL=redis://redis:6379
    depends_on:
      - database
      - redis
    networks:
      - app-network
    volumes:
      - ./uploads:/app/uploads

  # Database
  database:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=attendance_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network
    ports:
      - "5432:5432"

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - app-network
    ports:
      - "6379:6379"

  # Nginx Load Balancer (optional)
  nginx:
    image: nginx:alpine
    ports:
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
    networks:
      - app-network

volumes:
  postgres_data:
  redis_data:

networks:
  app-network:
    driver: bridge